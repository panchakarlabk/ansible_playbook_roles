---

- name: Get human-readable datetime
  ansible.builtin.command: date "+%Y-%m-%d %H:%M:%S"
  register: datetime_output
  delegate_to: localhost

- name: Set log path for each host dynamically
  set_fact:
    host_log_path: "{{ item.0.config.log_path | default(omit) }}"
    tail_log: "{{ item.0.tail | default(omit) }}" 
    log_files_to_collect: "{{ item.0.config.log_files_to_collect | default([]) }}"
  with_subelements:
    - "{{ lookup('vars', 'dba_automation_' + env) | dict2items | map(attribute='value') | list }}"
    - hosts
  when: inventory_hostname is match(item.1 | replace('*', '.*'))
  delegate_to: localhost

- name: Verify Oracle log files exist
  ansible.builtin.stat:
    path: "{{ host_log_path }}/{{ item }}"
  register: log_file_status
  loop: "{{ log_files_to_collect }}"
  loop_control:
    label: "{{ item }}"
  when: log_files_to_collect | length > 0  # Only run if log_files_to_collect is not empty

- name: Read and display content of each log file
  ansible.builtin.shell: |
    cat {{ host_log_path }}/{{ item.item }}
  register: all_logs
  with_items: "{{ log_file_status.results }}"
  changed_when: false

- name: Initialize logs_status dictionary
  ansible.builtin.set_fact:
    logs_status: {}

- name: Identify errors in logs and update logs_status
  ansible.builtin.set_fact:
    logs_status: >-
      {{
        logs_status | combine({
          (item.cmd | default('unknown_path') | basename): (
            'no logs found'
            if not item.stdout_lines | default([]) else
            ('not ok' if (
              'error' in (item.stdout_lines | join(' ') | lower) or
              'fail' in (item.stdout_lines | join(' ') | lower) or
              'exception' in (item.stdout_lines | join(' ') | lower)
            ) else 'ok')
          )
        })
      }}
  with_items: "{{ all_logs.results }}"
  delegate_to: localhost

- name: Display logs_status Variable
  debug:
    var: logs_status
  delegate_to: localhost
  with_items: "{{ all_logs.results }}"

- name: Append logs to /tmp/all_logs_collected.txt
  ansible.builtin.shell: |
    echo -e "Log Path: {{ item.cmd | default([]) }}" >> /tmp/all_logs_collected.txt
    echo -e "Status: {{ logs_status[item.cmd | default('unknown_path') | basename | trim]    
    echo -e "Host: {{ inventory_hostname | default([])  }}" >> /tmp/all_logs_collected.txt
    if [ "{{ item.stdout_lines | default([]) | join('') }}" = "" ]; then
        echo -e "No logs collected as of {{ ansible_date_time.iso8601 }}" >> /tmp/all_logs_collected.txt
    else
        echo -e "{{ item.stdout_lines | default([]) | join('\n') }}" >> /tmp/all_logs_collected.txt
    fi
    echo -e "End of logs from {{ inventory_hostname }}\n" >> /tmp/all_logs_collected.txt
  with_items: "{{ all_logs.results }}"
  when: 
    - logs_status is defined
  delegate_to: localhost

# Step 3: Display the collected logs
- name: Display the collected logs
  ansible.builtin.command: cat /tmp/all_logs_collected.txt
  delegate_to: localhost
  register: consolidated_logs
  run_once: true

- name: Intialize restore_logs
  ansible.builtin.set_fact:
    restore_logs: []
  delegate_to: localhost
  run_once: true

# Step 4: Collect the status and logs for each host in a list
- name: Create a list of logs and statuses
  ansible.builtin.set_fact:
    restore_logs: "{{ [{'host': inventory_hostname, 'logs_status': logs_status, 'logs': consolidated_logs.stdout_lines }] }}"
  delegate_to: localhost
  run_once: true

- name: Set restore_status_result 
  ansible.builtin.set_fact:
    restore_status_result:
      success: true
      message: "Restore status completed successfully."

- name: restore_status_result Variable
  debug:
    var: restore_status_result
