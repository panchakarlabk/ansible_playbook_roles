---

- name: Get human-readable datetime
  ansible.builtin.command: date "+%Y-%m-%d %H:%M:%S"
  register: datetime_output
  delegate_to: localhost

- name: Set log path for each host dynamically
  set_fact:
    host_log_path: "{{ item.0.config.log_path | default(omit) }}"
    tail_log: "{{ item.0.tail | default('Unknown') | default(omit) }}" 
    dr_type: "{{ item.0.dr_type | default(omit) }}" 
    log_files_to_collect: "{{ item.0.config.log_files_to_collect | default([]) }}"
  with_subelements:
    - "{{ lookup('vars', 'dba_automation_' + env) | dict2items | map(attribute='value') | list }}"
    - hosts
  when: inventory_hostname is match(item.1 | replace('*', '.*'))
  delegate_to: localhost

- name: Verify Oracle log files exist
  ansible.builtin.stat:
    path: "{{ host_log_path }}/{{ item }}"
  register: log_file_status
  loop: "{{ log_files_to_collect }}"
  loop_control:
    label: "{{ item }}"
  when: log_files_to_collect | length > 0  # Only run if log_files_to_collect is not empty

- name: Read and display content of each log file
  ansible.builtin.shell: |
    grep -E 'Import Release|Job "SYS"' {{ host_log_path }}/{{ item.item }} | tail -n 6
  register: all_logs
  with_items: "{{ log_file_status.results }}"
  changed_when: false
  when: 
    - dr_type == 'oracle'

# - name: See All LOGS
#   debug:
#     var: all_logs.results

- name: Append Logs To The File
  include_tasks: test.yaml
  when: 
    - dr_type == 'oracle'
  loop: "{{ all_logs.results }}"
  loop_control:
    loop_var: oracle_log

# - name: Initialize logs_status
#   ansible.builtin.set_fact:
#     logs_status: []
#   delegate_to: localhost
#   run_once: true

# # Step 3: Check for errors in logs
# - name: Identify errors in logs oracle
#   ansible.builtin.set_fact:
#     logs_status: "{{ log_status_test + [{ 'file': item.item, 'status': log_status }] }}"
#   vars:
#     log_status_test: >-
#       {% if not item.stdout_lines %}
#       no logs found
#       {% elif 'error' in (item.stdout_lines | join(' ') | lower) %}
#       not ok
#       {% elif 'fail' in (item.stdout_lines | join(' ') | lower) %}
#       not ok
#       {% elif 'exception' in (item.stdout_lines | join(' ') | lower) %}
#       not ok
#       {% else %}
#       ok
#       {% endif %}
#   with_items: "{{ all_logs.results }}"
#   delegate_to: localhost
#   when:
#     - dr_type == 'oracle'

# - name: Display logs_status Variable
#   debug:
#     var: logs_status
#   delegate_to: localhost

# - name: Append logs to /tmp/all_logs_collected.txt
#   ansible.builtin.shell: |
#     echo -e "**Status** {{ item_log_status.status }}" >> /tmp/all_logs_collected.txt
#     if [ "{{ log_content.stdout_lines | default([]) | join('') }}" = "" ]; then
#         echo -e "No logs collected as of {{ ansible_date_time.iso8601 }}" >> /tmp/all_logs_collected.txt
#     else
#         echo -e "Content of {{ log_file }}:" >> /tmp/all_logs_collected.txt
#         echo -e "{{ log_content.stdout_lines | join('\n') }}" >> /tmp/all_logs_collected.txt
#     fi
#     echo -e "End of Content of {{ log_file }}\n" >> /tmp/all_logs_collected.txt
#   loop: "{{ log_files_to_collect }}"
#   vars:
#     log_file: "{{ item }}"
#     log_content: >-
#       {{ all_logs.results | selectattr('item.item', 'equalto', item) | first | default({}) }}
#     item_log_status: >-
#       {{ logs_status | selectattr('file', 'equalto', item) | first | default({}) }}
#   delegate_to: localhost

# Step 3: Display the collected logs
- name: Display the collected logs
  ansible.builtin.command: cat /tmp/all_logs_collected.txt
  delegate_to: localhost
  register: consolidated_logs
  run_once: true

- name: Display logs_status Variable
  debug:
    var: consolidated_logs.stdout_lines
  delegate_to: localhost

- name: Intialize restore_logs
  ansible.builtin.set_fact:
    restore_logs: []
  delegate_to: localhost
  run_once: true

# Step 4: Collect the status and logs for each host in a list
- name: Create a list of logs and statuses
  ansible.builtin.set_fact:
    restore_logs: "{{ [{'host': inventory_hostname, 'logs_status': logs_status, 'logs': consolidated_logs.stdout_lines }] }}"
  delegate_to: localhost
  run_once: true

- name: Set restore_status_result 
  ansible.builtin.set_fact:
    restore_status_result:
      success: true
      message: "Restore status completed successfully."

- name: restore_status_result Variable
  debug:
    var: restore_status_result
