---

- name: Get human-readable datetime
  ansible.builtin.command: date "+%Y-%m-%d %H:%M:%S"
  register: datetime_output

- name: Set log path for each host dynamically
  set_fact:
    host_log_path: "{{ item.0.config.log_path }}"
  with_subelements:
    - "{{ dba_automation | dict2items | map(attribute='value') | list }}"
    - hosts
  when: inventory_hostname == item.1

- name: Display the log path for each host
  debug:
    msg: "Log path for {{ inventory_hostname }} is {{ host_log_path }}"
  when: host_log_path is defined

# Step 1: Collect logs and append them to a single file
- name: Daily Monitor Logs DR PE restore log status
  ansible.builtin.shell: | 
    tail "{{ host_log_path }}" | grep "$(date +%Y/%m/%d)"
  ignore_errors: yes  # Continue even if there are issues
  register: all_logs
  when: host_log_path is defined

# Step 3: Check for errors in logs
- name: Identify errors in logs
  ansible.builtin.set_fact:
    logs_status: >-
      {% if not all_logs.stdout_lines %}
      no logs found
      {% elif 'error' in (all_logs.stdout_lines | join(' ') | lower) %}
      not ok
      {% elif 'fail' in (all_logs.stdout_lines | join(' ') | lower) %}
      not ok
      {% elif 'exception' in (all_logs.stdout_lines | join(' ') | lower) %}
      not ok
      {% else %}
      ok
      {% endif %}
  delegate_to: localhost
  ignore_errors: yes  # Continue even if there are issues
  when: all_logs.stdout_lines is defined

- name: Append logs with CET time
  ansible.builtin.shell: |
    echo -e "**DR PE** {{ ansible_date_time.iso8601 }} CET" >> /tmp/all_logs_collected.txt
    echo -e "**Status** {{ logs_status }} CET" >> /tmp/all_logs_collected.txt
    if [ -z "{{ all_logs.stdout_lines | join('') }}" ]; then
      echo -e "No logs collected as of {{ ansible_date_time.iso8601 }} CET" >> /tmp/all_logs_collected.txt
    else
      echo -e "{{ all_logs.stdout_lines | join('\n') }}" >> /tmp/all_logs_collected.txt
    fi
    echo -e "End of logs from {{ inventory_hostname }}\n" >> /tmp/all_logs_collected.txt
  delegate_to: localhost
  ignore_errors: yes  # Continue even if there are issues
  when: logs_status is defined

# Step 5: Display the collected logs
- name: Display the collected logs
  ansible.builtin.command: cat /tmp/all_logs_collected.txt
  delegate_to: localhost
  register: consolidated_logs
  run_once: true

- name: Initialize email_body variable
  ansible.builtin.set_fact:
    email_body: []
  delegate_to: localhost
  run_once: true

# Step 4: Collect the status and logs for each host in a list
- name: Create a list of logs and statuses
  ansible.builtin.set_fact:
    restore_logs: "{{ [{'host': inventory_hostname, 'logs_status': logs_status, 'logs': consolidated_logs.stdout_lines }] }}"
  delegate_to: localhost
  when: 
    - logs_status is defined
    - consolidated_logs is defined
    - consolidated_logs.stdout_lines is defined



